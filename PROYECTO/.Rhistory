datos <- read.csv("D:\MAESTRÍA EN BIG DATA Y DATA ANALYTICS\Análisis e interpretación de datos 24-01-2023\ACTIVIDAD 3\Sleep_health_and_lifestyle_dataset.csv")
datos <- read.csv("D:\MAESTRÍA EN BIG DATA Y DATA ANALYTICS\Análisis e interpretación de datos 24-01-2023\ACTIVIDAD 3\Sleep_health_and_lifestyle_dataset.csv")
datos <- read.csv("D:/MAESTRÍA EN BIG DATA Y DATA ANALYTICS/Análisis e interpretación de datos 24-01-2023/ACTIVIDAD 3/Sleep_health_and_lifestyle_dataset.csv")
install.packages("readxl")
head(datos)
library(ggplot2)
summary(datos$Sleep.Duration)
ggplot(datos, aes(x = "", y = Sleep.Duration)) +
geom_boxplot() +
labs(title = "Distribución de Horas de Sueño", y = "Horas de Sueño por Noche") +
theme_minimal()
install.packages("psych")
library(psych)
describe(datos$Sleep.Duration)
ggplot(datos, aes(x = Sleep.Duration)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(color = "red") +
labs(title = "Distribución de Horas de Sueño", x = "Horas de Sueño por Noche", y = "Frecuencia") +
theme_minimal()
# Definir las proporciones muestrales
prop1 <- sum(datos$SleepDisorder == "None") / nrow(datos)
prop2 <- sum(datos$SleepDisorder != "None") / nrow(datos)
# Definir la proporción de la población combinada
p <- sum(datos$SleepDisorder == "None" | datos$SleepDisorder != "None") / nrow(datos)
# Definir los tamaños de las muestras
n1 <- sum(datos$SleepDisorder == "None")
n2 <- sum(datos$SleepDisorder != "None")
# Calcular el estadístico de contraste z
z <- (prop1 - prop2) / sqrt(p * (1 - p) * (1/n1 + 1/n2))
# Calcular el p-valor (asumiendo una prueba de dos colas)
p_valor <- 2 * (1 - pnorm(abs(z)))
# Mostrar resultados
cat("Estadístico de contraste z:", z, "\n")
cat("P-valor:", p_valor, "\n")
# Definir las proporciones muestrales
prop1 <- sum(datos$Sleep.Disorder == "None") / nrow(datos)
prop2 <- sum(datos$Sleep.Disorder != "None") / nrow(datos)
# Definir la proporción de la población combinada
p <- sum(datos$Sleep.Disorder == "None" | datos$SleepDisorder != "None") / nrow(datos)
# Definir los tamaños de las muestras
n1 <- sum(datos$Sleep.Disorder == "None")
n2 <- sum(datos$Sleep.Disorder != "None")
# Calcular el estadístico de contraste z
z <- (prop1 - prop2) / sqrt(p * (1 - p) * (1/n1 + 1/n2))
# Calcular el p-valor (asumiendo una prueba de dos colas)
p_valor <- 2 * (1 - pnorm(abs(z)))
# Mostrar resultados
cat("Estadístico de contraste z:", z, "\n")
cat("P-valor:", p_valor, "\n")
# Definir las proporciones muestrales
prop1 <- sum(datos$Sleep.Duration == "None") / nrow(datos)
prop2 <- sum(datos$Sleep.Duration != "None") / nrow(datos)
# Definir la proporción de la población combinada
p <- sum(datos$Sleep.Duration == "None" | datos$SleepDisorder != "None") / nrow(datos)
# Definir los tamaños de las muestras
n1 <- sum(datos$Sleep.Duration == "None")
n2 <- sum(datos$Sleep.Duration != "None")
# Calcular el estadístico de contraste z
z <- (prop1 - prop2) / sqrt(p * (1 - p) * (1/n1 + 1/n2))
# Calcular el p-valor (asumiendo una prueba de dos colas)
p_valor <- 2 * (1 - pnorm(abs(z)))
# Mostrar resultados
cat("Estadístico de contraste z:", z, "\n")
cat("P-valor:", p_valor, "\n")
# Definir las proporciones muestrales
prop1 <- sum(datos$Sleep.Duration == "None") / nrow(datos)
prop2 <- sum(datos$Sleep.Duration != "None") / nrow(datos)
# Definir la proporción de la población combinada
p <- sum(datos$Sleep.Duration == "None" | datos$Sleep.Duration != "None") / nrow(datos)
# Definir los tamaños de las muestras
n1 <- sum(datos$Sleep.Duration == "None")
n2 <- sum(datos$Sleep.Duration != "None")
# Calcular el estadístico de contraste z
z <- (prop1 - prop2) / sqrt(p * (1 - p) * (1/n1 + 1/n2))
# Calcular el p-valor (asumiendo una prueba de dos colas)
p_valor <- 2 * (1 - pnorm(abs(z)))
# Mostrar resultados
cat("Estadístico de contraste z:", z, "\n")
cat("P-valor:", p_valor, "\n")
# Cargar la librería para las funciones Z
library(BSDA)
install.packages("BSDA")
library(BSDA)
# Especificar los datos
data_sleep <- datos$Sleep.Duration
# Especificar la media del país
mean_country <- 7
# Realizar la prueba Z
z_test_result <- zsum.test(data_sleep, mu = mean_country)
muestra1 <- c(23, 25, 28, 21, 20, 24, 27, 22, 26, 19)
muestra2 <- c(30, 32, 28, 29, 31, 27, 30, 28, 32, 29)
# Realizar la prueba Z para medias
prueba_z_media <- t.test(muestra1, muestra2)
# Imprimir resultados
print(prueba_z_media)
hipotesis_media <- 7  # Media nacional
resultado_prueba <- t.test(datos$Sleep.Duration, mu = hipotesis_media)
# Visualización del resultado de la prueba
print(resultado_prueba)
# Interpretación
if (resultado_prueba$p.value < 0.05) {
cat("La diferencia en las horas de sueño es estadísticamente significativa.\n")
} else {
cat("No hay evidencia significativa para afirmar que la media de horas de sueño es diferente de la media nacional.\n")
}
print(resultado_prueba)
summary(datos$Sleep.Duration)
ggplot(datos, aes(x = "", y = Sleep.Duration)) +
geom_boxplot() +
labs(title = "Distribución de Horas de Sueño", y = "Horas de Sueño por Noche") +
theme_minimal()
describe(datos$Sleep.Duration)
ggplot(datos, aes(x = Sleep.Duration)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(color = "red") +
labs(title = "Distribución de Horas de Sueño", x = "Horas de Sueño por Noche", y = "Frecuencia") +
theme_minimal()
ggplot(datos, aes(x = "", y = Sleep.Duration)) +
geom_boxplot() +
labs(title = "Distribución de Horas de Sueño", y = "Horas de Sueño por Noche") +
theme_minimal()
describe(datos$Sleep.Duration)
summary(datos$Sleep.Duration)
ggplot(datos, aes(x = "", y = Sleep.Duration)) +
geom_boxplot() +
labs(title = "Distribución de Horas de Sueño", y = "Horas de Sueño por Noche") +
theme_minimal()
describe(datos$Sleep.Duration)
ggplot(datos, aes(x = Sleep.Duration)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(color = "red") +
labs(title = "Distribución de Horas de Sueño", x = "Horas de Sueño por Noche", y = "Frecuencia") +
theme_minimal()
hipotesis_media <- 7  # Media nacional
resultado_prueba <- t.test(datos$Sleep.Duration, mu = hipotesis_media)
# Visualización del resultado de la prueba
print(resultado_prueba)
# Interpretación
if (resultado_prueba$p.value < 0.05) {
cat("La diferencia en las horas de sueño es estadísticamente significativa.\n")
} else {
cat("No hay evidencia significativa para afirmar que la media de horas de sueño es diferente de la media nacional.\n")
}
datos <- read.csv("D:/MAESTRÍA EN BIG DATA Y DATA ANALYTICS/Análisis e interpretación de datos 24-01-2023/ACTIVIDAD 3/colegios")
datos <- read.csv("D:/MAESTRÍA EN BIG DATA Y DATA ANALYTICS/Análisis e interpretación de datos 24-01-2023/ACTIVIDAD 3/colegios.csv")
install.packages("readxl")
head(datos)
datos <- read.csv("D:/MAESTRÍA EN BIG DATA Y DATA ANALYTICS/Análisis e interpretación de datos 24-01-2023/ACTIVIDAD 3/calificaciones.csv")
install.packages("readxl")
head(datos)
library(ggplot2)
install.packages("psych")
library(psych)
install.packages("BSDA")
summary(datos$Sleep.Duration)
library(ggplot2)
install.packages("psych")
library(psych)
install.packages("BSDA")
summary(datos$Sleep.Duration)
desc_stats_previo <- summary(datos$ExitoPrevio)
desc_stats_actual <- summary(datos$ExitoActual)
# Visualizamos las estadísticas descriptivas
print("Estadísticas Descriptivas para ExitoPrevio:")
print(desc_stats_previo)
print("Estadísticas Descriptivas para ExitoActual:")
print(desc_stats_actual)
stats_previo <- aggregate(ExitoPrevio ~ Escuela + Metodo, data = datos, summary)
stats_actual <- aggregate(ExitoActual ~ Escuela + Metodo, data = datos, summary)
# Imprimir las estadísticas descriptivas
print("Estadísticas Descriptivas para ExitoPrevio:")
print(stats_previo)
print("Estadísticas Descriptivas para ExitoActual:")
print(stats_actual)
stats_previo <- aggregate(ExitoPrevio ~ Escuela + Metodo, data = datos, summary)
stats_actual <- aggregate(ExitoActual ~ Escuela + Metodo, data = datos, summary)
# Imprimir las estadísticas descriptivas
print("Estadísticas Descriptivas para ExitoPrevio:")
print(stats_previo)
print("Estadísticas Descriptivas para ExitoActual:")
print(stats_actual)
datos$Metodo <- ifelse(datos$Metodo == "A", "ABP", datos$Metodo)
datos$Metodo <- ifelse(datos$Metodo == "B", "Competencias", datos$Metodo)
# Agrupar por Escuela y Método y calcular las estadísticas descriptivas
stats_previo <- aggregate(ExitoPrevio ~ Escuela + Metodo, data = datos, summary)
stats_actual <- aggregate(ExitoActual ~ Escuela + Metodo, data = datos, summary)
# Imprimir las estadísticas descriptivas
print("Estadísticas Descriptivas para ExitoPrevio:")
print(stats_previo)
print("Estadísticas Descriptivas para ExitoActual:")
print(stats_actual)
promedios <- aggregate(cbind(ExitoPrevio, ExitoActual) ~ Metodo + Escuela, data = datos, FUN = mean)
# Crear un gráfico de barras
ggplot(promedios, aes(x = Metodo, y = ExitoPrevio, fill = Escuela)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
geom_bar(aes(y = ExitoActual), stat = "identity", position = position_dodge(width = 0.8), width = 0.7, alpha = 0.7) +
labs(title = "Comparación de Métodos de Enseñanza",
x = "Método",
y = "Promedio de Éxito") +
scale_fill_manual(values = c("Mi pequeño gigante" = "blue", "Santa Rita" = "red")) +
theme_minimal()
ggplot(datos, aes(x = Metodo, y = ExitoPrevio, fill = Escuela)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge") +
labs(title = "Comparación de Métodos de Enseñanza",
x = "Método",
y = "Promedio de Éxito Previo") +
scale_fill_manual(values = c("Mi pequeño gigante" = "blue", "Santa Rita" = "red")) +
theme_minimal()
ggplot(datos, aes(x = Metodo, fill = Escuela)) +
geom_bar(aes(y = ExitoPrevio), stat = "summary", fun = "mean", position = "dodge", color = "black") +
geom_bar(aes(y = ExitoActual), stat = "summary", fun = "mean", position = "dodge", color = "white", fill = "grey") +
labs(title = "Comparación de Métodos de Enseñanza",
x = "Método",
y = "Promedio de Éxito") +
scale_fill_manual(values = c("Mi pequeño gigante" = "blue", "Santa Rita" = "red")) +
theme_minimal()
ggplot(datos, aes(x = Metodo, fill = Escuela)) +
geom_bar(aes(y = ExitoPrevio), stat = "summary", fun = "mean", position = "dodge", color = "black") +
geom_bar(aes(y = ExitoActual), stat = "summary", fun = "mean", position = "dodge", color = "white", fill = "grey") +
labs(title = "Comparación de Métodos de Enseñanza",
x = "Método",
y = "Promedio de Éxito") +
scale_fill_manual(values = c("Mi pequeño gigante" = "blue", "Santa Rita" = "red")) +
theme_minimal()
library(ggplot2)
ggplot(datos, aes(x = Metodo, fill = Escuela)) +
geom_bar(aes(y = ExitoPrevio), stat = "summary", fun = "mean", position = "dodge", color = "black") +
geom_bar(aes(y = ExitoActual), stat = "summary", fun = "mean", position = "dodge", color = "white", fill = "grey") +
labs(title = "Comparación de Métodos de Enseñanza",
x = "Método",
y = "Promedio de Éxito") +
scale_fill_manual(values = c("Mi pequeño gigante" = "blue", "Santa Rita" = "red")) +
theme_minimal()
grafico_previo <- ggplot(datos, aes(x = Metodo, y = ExitoPrevio, fill = Escuela)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge", color = "black") +
labs(title = "Comparación de Métodos de Enseñanza",
x = "Método",
y = "Promedio de Éxito Previo") +
scale_fill_manual(values = c("Mi pequeño gigante" = "blue", "Santa Rita" = "red")) +
theme_minimal()
# Crear gráfico de barras para Éxito Actual
grafico_actual <- ggplot(datos, aes(x = Metodo, y = ExitoActual, fill = Escuela)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge", color = "black") +
labs(x = "Método",
y = "Promedio de Éxito Actual") +
theme_minimal()
# Combinar los gráficos
library(gridExtra)
install.packages("gridExtra")
grafico_previo <- ggplot(datos, aes(x = Metodo, y = ExitoPrevio, fill = Escuela)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge", color = "black") +
labs(title = "Comparación de Métodos de Enseñanza",
x = "Método",
y = "Promedio de Éxito Previo") +
scale_fill_manual(values = c("Mi pequeño gigante" = "blue", "Santa Rita" = "red")) +
theme_minimal()
# Crear gráfico de barras para Éxito Actual
grafico_actual <- ggplot(datos, aes(x = Metodo, y = ExitoActual, fill = Escuela)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge", color = "black") +
labs(x = "Método",
y = "Promedio de Éxito Actual") +
theme_minimal()
# Combinar los gráficos
grid.arrange(grafico_previo, grafico_actual, ncol = 2)
library(gridExtra)
grafico_previo <- ggplot(datos, aes(x = Metodo, y = ExitoPrevio, fill = Escuela)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge", color = "black") +
labs(title = "Comparación de Métodos de Enseñanza",
x = "Método",
y = "Promedio de Éxito Previo") +
scale_fill_manual(values = c("Mi pequeño gigante" = "blue", "Santa Rita" = "red")) +
theme_minimal()
# Crear gráfico de barras para Éxito Actual
grafico_actual <- ggplot(datos, aes(x = Metodo, y = ExitoActual, fill = Escuela)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge", color = "black") +
labs(x = "Método",
y = "Promedio de Éxito Actual") +
theme_minimal()
# Combinar los gráficos
grid.arrange(grafico_previo, grafico_actual, ncol = 2)
resultado_prueba <- t.test(ExitoPrevio ~ Metodo, data = datos)
print(resultado_prueba)
# Visualización del resultado de la prueba
boxplot(ExitoPrevio ~ Metodo, data = datos, main = "Comparación de Éxito Previo por Método")
resultado_prueba <- t.test(ExitoPrevio ~ Metodo, data = datos)
print(resultado_prueba)
resultado_prueba_previo <- t.test(ExitoPrevio ~ Metodo, data = datos)
print(resultado_prueba_previo)
datos$Mejora <- datos$ExitoActual - datos$ExitoPrevio
# Prueba t para la diferencia de medias en la mejora
resultado_prueba_mejora <- t.test(Mejora ~ Metodo, data = datos)
print(resultado_prueba_mejora)
